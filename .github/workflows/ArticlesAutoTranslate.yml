name: Articles auto translate
run-name: ${{ github.event.label.name }} - ${{ github.event.issue.title }}

on:
  issues:
    types:
      - labeled

jobs:
  ArticlesAutoTranslate:
    runs-on: ubuntu-latest
    env:
      ACTIONS_RUNNER_DEBUG: true
    permissions:
      issues: write
      contents: write

    # Only run this job if the label is exactly 'auto'
    if: ${{ github.event.label.name == 'auto' }}

    steps:
      # Step 1: Ensure the issue body contains a URL. If it's empty, exit early.
      - name: Check if the description of the issue is empty
        if: ${{ !github.event.issue.body }}
        shell: bash
        run: echo "The description of the issue is empty." 1>&2; exit 1;

      # Step 2: Extract the language code from the issue title (e.g., [zh] => zh)
      - name: Extract language code (e.g., [zh])
        id: extract-lang
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          LANG_CODE=$(echo "$ISSUE_TITLE" | sed -E 's/^\[([a-zA-Z]+)\].*/\1/')
          echo "lang=$LANG_CODE" >> $GITHUB_OUTPUT

      # Step 3: Checkout the repository and configure Git
      - uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git config pull.rebase true

      # Step 4: Clean up any previous temporary files from the main branch
      - name: Clean temporary directory on main
        run: |
          git checkout main
          if [ -d "./articles/_tmp/" ]; then
            rm -rf ./articles/_tmp/
          fi

      # Step 5: Use the provided article URL to fetch and convert to Markdown
      - name: Crawl article and convert to Markdown
        id: fetch-webpage-to-markdown
        continue-on-error: true
        uses: freecodecamp/article-webpage-to-markdown-action@dev
        with:
          newsLink: '${{ github.event.issue.body }}'
          includeSelector: 'span.author-card-name,section.post-content'
          ignoreSelector: '.ad-wrapper'
          skipSameArticleCheck: true
          skipIssueComment: true
          markDownFilePath: './articles/_tmp/'
          githubToken: '${{ github.token }}'

      # Step 6: Copy and add the fetched raw article to main branch (original and language-specific dirs)
      - name: Push new article to main branch (safe push)
        run: |
          MARKDOWN_FILE="${{ steps.fetch-webpage-to-markdown.outputs.markdown_file_path }}"
          FILENAME=$(basename "$MARKDOWN_FILE")
          LANG=${{ steps.extract-lang.outputs.lang }}

          # Save to ./articles/_raw/
          cp -f "$MARKDOWN_FILE" "./articles/_raw/$FILENAME"

          # Copy to {lang} directory only if not exists
          if [ ! -f "./articles/$LANG/$FILENAME" ]; then
            cp "$MARKDOWN_FILE" "./articles/$LANG/$FILENAME"
          fi

          git add "./articles/_tmp/$FILENAME"
          git add "./articles/_raw/$FILENAME"
          if git status --short | grep "$LANG/$FILENAME"; then
            git add "./articles/$LANG/$FILENAME"
          fi

          git commit -m "Save article markdown."

          # Safe push with retry logic
          for i in 1 2 3; do
            git pull --rebase origin main && git push origin main && break
            echo "Push failed, retrying in 5 seconds..."
            sleep 5
          done



      # Step 7: Switch to auto-translate branch and merge latest from main to inherit directory structure
      - name: Checkout auto-translate branch
        run: |
          git fetch
          git checkout -b auto-translate origin/auto-translate
          git merge --strategy=recursive --strategy-option=theirs --allow-unrelated-histories main

      # Step 8: Automatically translate the article using OpenAI API
      - name: Translate article with OpenAI
        uses: miyaliu666/articles-auto-translate-action@main
        with:
          with_issue_title: '${{ github.event.issue.title }}'
          with_issue_body: '${{ github.event.issue.body }}'
          with_label_name: '${{ github.event.label.name }}'
          with_github_token: '${{ github.token }}'
          with_orginal_markdown_file_path: ${{ steps.fetch-webpage-to-markdown.outputs.markdown_file_path }}
          with_task_fetch_to_save_path: './articles/_raw/'
          with_task_fetch_to_include_selector: '.author-card-name,.post-content'
          with_task_fetch_to_ignore_selector: '.ad-wrapper'
          with_task_translate_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          with_task_translate_to_save_path: './articles/${{ steps.extract-lang.outputs.lang }}/'

      # Step 9: Commit only the translated article to auto-translate branch (do not commit raw/)
      - name: Commit translated article to auto-translate branch
        run: |
          MARKDOWN_FILE="${{ steps.fetch-webpage-to-markdown.outputs.markdown_file_path }}"
          FILENAME=$(basename "$MARKDOWN_FILE")
          LANG=${{ steps.extract-lang.outputs.lang }}
          TRANSLATED_FILE="./articles/$LANG/$FILENAME"

          if [ -f "$TRANSLATED_FILE" ]; then
            git add "$TRANSLATED_FILE"
            git commit -m "Save auto-translated article markdown."

            for i in 1 2 3; do
              git pull --rebase origin auto-translate && git push origin auto-translate && break
              echo "Retrying push to auto-translate ($i)..."
              sleep 5
            done
          else
            echo "Translated file not found: $TRANSLATED_FILE"
            exit 1
          fi

      # Step 10: Clean temporary directory from main branch again (after switching back)
      - name: Final cleanup of _tmp on main
        run: |
          git checkout main

          TMP_DIR="./articles/_tmp/"

          if [ -d "$TMP_DIR" ]; then
            rm -rf "$TMP_DIR"

            if git ls-files --deleted -- "$TMP_DIR" | grep -q .; then
              git add "$TMP_DIR" || true
              git commit -m "Remove _tmp directory."

              for i in 1 2 3; do
                git pull --rebase origin main && git push origin main && break
                echo "Retrying push to main ($i)..."
                sleep 5
              done
            else
              echo "No changes to commit after removing _tmp."
            fi
          else
            echo "_tmp folder does not exist. Skipping cleanup."
          fi
